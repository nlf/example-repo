name: nightly nodejs ci
on:
  workflow_dispatch:

jobs:
  build-nightly:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.download-nightly.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'npm/cli'
      - name: Download Node nightly
        uses: actions/github-script@v6
        id: download-nightly
        with:
          script: |
            const localDir = `${process.env.RUNNER_TEMP}/nodejs`
            await io.mkdirP(localDir)

            // find the version of the latest nightly
            core.startGroup('finding latest nightly version')
            await exec.exec('curl', ['-o', `${localDir}/nightlies.json`, 'https://nodejs.org/download/nightly/index.json'])
            const availableNightlies = require(`${localDir}/nightlies.json`)
            const { version } = availableNightlies[0]
            core.setOutput('version', version)
            core.endGroup()

            // download the source tarball
            core.startGroup(`downloading nodejs ${version}`)
            const filename = `node-${version}.tar.xz`
            const target = `${localDir}/${filename}`
            await exec.exec('curl', ['-o', target, `https://nodejs.org/download/nightly/${version}/${filename}`])
            core.endGroup()

            // extract the source
            core.startGroup('extracting source')
            await exec.exec('tar', ['xf', target, '--strip=1', '-C', localDir])
            core.endGroup()
      - name: Update bundled npm
        uses: actions/github-script@v6
        with:
          script: |
            core.startGroup('packing an npm tarball')
            let filename = ''
            await exec.exec('node', ['.', 'run', 'resetdeps'])
            await exec.exec('node', ['.', 'pack', '--loglevel=silent'], {
              listeners: {
                stdout: (data) => {
                  filename += data
                },
              },
            })
            filename = filename.trim().split(/\n/g).find((item) => item.startsWith('npm-') && item.endsWith('.tgz'))
            core.endGroup()

            const localDir = `${process.env.RUNNER_TEMP}/nodejs`

            core.startGroup('removing old npm')
            await io.rmRF(`${localDir}/deps/npm`)
            await io.mkdirP(`${localDir}/deps/npm`)
            core.endGroup()

            core.startGroup('updating to new npm')
            await exec.exec('tar', ['xf', filename, '-C', `${localDir}/deps/npm/`, '--strip=1'])
            core.endGroup()
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Setup ccache
        uses: actions/github-script@v6
        with:
          script: |
            core.addPath('/usr/local/opt/ccache/libexec')
            core.addPath('/usr/lib/ccache')
      - name: Test
        run: |
          cd "${RUNNER_TEMP}/nodejs"
          ./configure --prefix="${RUNNER_TEMP}/node"
          make -j4 test-only
      - name: Install nightly nodejs build
        run: |
          cd "${RUNNER_TEMP}/nodejs"
          make install
      - name: Generate nodejs artifact
        run: |
          tar cfz -C "${RUNNER_TEMP}/nodejs" "${RUNNER_TEMP}/node-nightly.tgz"
      - name: Upload nodejs artifact
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-nightly-${{ steps.download-nightly.outputs.version }}
          path: "${RUNNER_TEMP}/node-nightly.tgz"
      # - name: Add nightly nodejs to path
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       core.addPath(`${process.env.RUNNER_TEMP}/node/bin`)
      # - name: Node version
      #   run: |
      #     node --version
      # - name: npm version
      #   run: |
      #     npm --version
      # - name: Find npm cache directory
      #   id: npm-cache
      #   run: |
      #     echo "::set-output name=dir::$(npm config get cache)"
      # - name: Setup npm cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.npm-cache.outputs.dir }}
      #     key: "npm-cache"
      # - name: Install citgm
      #   run: |
      #     npm i -g citgm
      # - name: Run citgm
      #   run: |
      #     echo 'require("child_process").execSync("npm ls")' > "${RUNNER_TEMP}/npm-ls.js"
      #     citgm-all --markdown --nodedir "${RUNNER_TEMP}/nodejs" --excludeTags yarn --customTest "${RUNNER_TEMP}/npm-ls.js"
