name: nightly nodejs ci
on:
  workflow_dispatch:
  release:
    types:
      - published
  schedule:
    # "At 23:00 UTC" https://crontab.guru/#0_23_*_*_*
    - cron: '0 23 * * *'

jobs:
  install-nightly:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: 'npm/cli'
      - name: Download Node nightly
        uses: actions/github-script@v6
        with:
          script: |
            const localDir = `${process.env.RUNNER_TEMP}/nodejs`
            await io.mkdirP(localDir)

            // find the version of the latest nightly
            core.startGroup('finding latest nightly version')
            await exec.exec('curl', ['-o', `${localDir}/nightlies.json`, 'https://nodejs.org/download/nightly/index.json'])
            const availableNightlies = require(`${localDir}/nightlies.json`)
            const { version } = availableNightlies[0]
            core.endGroup()

            // download the source tarball
            core.startGroup(`downloading nodejs ${version}`)
            const filename = `node-${version}.tar.xz`
            const target = `${localDir}/${filename}`
            await exec.exec('curl', ['-o', target, `https://nodejs.org/download/nightly/${version}/${filename}`])
            core.endGroup()

            // extract the source
            core.startGroup('extracting source')
            await exec.exec('tar', ['xf', target, '--strip=1', '-C', localDir])
            core.endGroup()
      - name: Update bundled npm
        uses: actions/github-script@v6
        with:
          script: |
            core.startGroup('packing an npm tarball')
            let filename = ''
            await exec.exec('node', ['.', 'run', 'resetdeps'])
            await exec.exec('node', ['.', 'pack', '--loglevel=silent'], {
              listeners: {
                stdout: (data) => {
                  filename += data
                },
              },
            })
            filename = filename.trim().split(/\n/g).find((item) => item.startsWith('npm-') && item.endsWith('.tgz'))
            core.endGroup()

            const localDir = `${process.env.RUNNER_TEMP}/nodejs`

            core.startGroup('removing old npm')
            await io.rmRF(`${localDir}/deps/npm`)
            await io.mkdirP(`${localDir}/deps/npm`)
            core.endGroup()

            core.startGroup('updating to new npm')
            await exec.exec('tar', ['xf', filename, '-C', `${localDir}/deps/npm/`, '--strip=1'])
            core.endGroup()
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Setup ccache
        uses: actions/github-script@v6
        with:
          script: |
            core.addPath('/usr/local/opt/ccache/libexec')
            core.addPath('/usr/lib/ccache')
      - name: Test
        run: |
          cd "${RUNNER_TEMP}/nodejs"
          ./configure --prefix="${RUNNER_TEMP}/node"
          make -j4 test-only
      - name: Install nightly nodejs build
        run: |
          cd "${RUNNER_TEMP}/nodejs"
          make install
      - name: Add nightly nodejs to path
        uses: actions/github-script@v6
        with:
          script: |
            core.addPath(`${process.env.RUNNER_TEMP}/node/bin`)
      - name: Node version
        run: |
          node --version
      - name: npm version
        run: |
          npm --version
      - name: Install citgm
        run: |
          npm i -g citgm
      - name: Run citgm
        run: |
          echo 'require("child_process").execSync("npm ls")' > "${RUNNER_TEMP}/npm-ls.js"
          citgm-all --tap --nodedir "${RUNNER_TEMP}/nodejs" --excludeTags yarn --customTest "${RUNNER_TEMP}/npm-ls.js"
