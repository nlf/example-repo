name: nightly nodejs ci
on:
  workflow_dispatch:

jobs:
  build-nightly:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.download-nightly.outputs.version }}
    steps:
      - name: Checkout npm/cli
        uses: actions/checkout@v3
        with:
          repository: 'npm/cli'
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Build nodejs nightly
        uses: actions/github-script@v6
        id: build-nightly
        with:
          script: |
            // add ccache to the path
            core.addPath('/usr/local/opt/ccache/libexec')
            core.addPath('/usr/lib/ccache')

            // setup some common vars
            const tmpDir = process.env.RUNNER_TEMP
            const sourceDir = `${tmpDir}/src`
            const targetDir = `${tmpDir}/build`
            const targetFile = `${targetDir}.tgz`

            // find the version of the latest nightly
            await exec.exec('curl', ['-o', `${tmpDir}/nightlies.json`, 'https://nodejs.org/download/nightly/index.json'])
            const availableNightlies = require(`${tmpDir}/nightlies.json`)
            const { version } = availableNightlies[0]
            core.setOutput('version', version)

            // download the source tarball
            const filename = `node-${version}.tar.xz`
            const target = `${tmpDir}/${filename}`
            await exec.exec('curl', ['-o', target, `https://nodejs.org/download/nightly/${version}/${filename}`])

            // extract the source
            await io.mkdirP(sourceDir)
            await exec.exec('tar', ['xf', target, '--strip=1', '-C', sourceDir])

            // update the bundled npm
            await exec.exec('node', ['.', 'run', 'resetdeps'])

            let npmTarball = ''
            await exec.exec('node', ['.', 'pack', '--loglevel=silent'], {
              listeners: {
                stdout: (data) => {
                  npmTarball += data
                },
              },
            })
            npmTarball = npmTarball
              .trim()
              .split(/\n/g)
              .find((item) => {
                return item.startsWith('npm-') && item.endsWith('.tgz')
              })

            await io.rmRF(`${sourceDir}/deps/npm`)
            await io.mkdirP(`${sourceDir}/deps/npm`)

            await exec.exec('tar', ['xf', filename, '-C', `${sourceDir}/deps/npm/`, '--strip=1'])

            // configure the source directory
            await exec.exec('./configure', ['--prefix', targetDir], { cwd: sourceDir })

            // run tests
            await exec.exec('make', ['-j4', 'test-only'], { cwd: sourceDir })

            // generate build artifact
            await exec.exec('make', ['install'], { cwd: sourceDir })
            await exec.exec('tar', ['cfz', targetFile, '-C', targetDir, '*'])
            core.setOutput('artifact', targetFile)
      - name: Upload nodejs artifact
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-nightly-${{ steps.download-nightly.outputs.version }}
          path: ${{ steps.generate-artifact.outputs.artifact }}
      # - name: Add nightly nodejs to path
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       core.addPath(`${process.env.RUNNER_TEMP}/node/bin`)
      # - name: Node version
      #   run: |
      #     node --version
      # - name: npm version
      #   run: |
      #     npm --version
      # - name: Find npm cache directory
      #   id: npm-cache
      #   run: |
      #     echo "::set-output name=dir::$(npm config get cache)"
      # - name: Setup npm cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{ steps.npm-cache.outputs.dir }}
      #     key: "npm-cache"
      # - name: Install citgm
      #   run: |
      #     npm i -g citgm
      # - name: Run citgm
      #   run: |
      #     echo 'require("child_process").execSync("npm ls")' > "${RUNNER_TEMP}/npm-ls.js"
      #     citgm-all --markdown --nodedir "${RUNNER_TEMP}/nodejs" --excludeTags yarn --customTest "${RUNNER_TEMP}/npm-ls.js"
