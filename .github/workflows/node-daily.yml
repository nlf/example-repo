name: nodejs nightly build

on:
  workflow_dispatch:

# used by setup-ccache-action's post hook to cleanup old caches
permissions:
  actions: write

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  # used for both the ccache key and artifact names
  key_prefix: nodejs-nightly 

jobs:
  build-nodejs:
    name: build nodejs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build-nodejs.outputs.version }}
    steps:
      - name: setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          override_cache_key: ${{ env.key_prefix }}
      - name: checkout npm/cli
        uses: actions/checkout@v3
        with:
          repository: npm/cli
      - name: build nodejs
        id: build-nodejs
        run: |
          set -eo pipefail

          sourceDir="${RUNNER_TEMP}/src"
          targetDir="${RUNNER_TEMP}/build"
          sourceFile="${RUNNER_TEMP}/source.tgz"
          targetFile="${RUNNER_TEMP}/build.tgz"

          echo "::group::finding latest nightly version"
          version="$(curl -sSL https://nodejs.org/download/nightly/index.json | jq -r .[0].version)"
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "::group::extracting source"
          mkdir -p "$sourceDir"
          curl -sSL "https://nodejs.org/download/nightly/${version}/node-${version}.tar.gz" |\
            tar xz -C "$sourceDir" --strip=1
          echo "::endgroup::"

          echo "::group::packing npm release"
          node . run resetdeps
          npmtarball="$(node . pack --loglevel=silent --json | jq -r .[0].filename)"
          rm -rf "${sourceDir}/deps/npm"
          mkdir -p "${sourceDir}/deps/npm"
          tar xfz "$npmtarball" -C "${sourceDir}/deps/npm" --strip=1
          echo "::endgroup::"

          echo "::group::packing nodejs source"
          tar cfz "$sourceFile" -C "$sourceDir" .
          echo "source=$sourceFile" >> $GITHUB_OUTPUT
          echo "::endgroup::"

          echo "::group::building nodejs"
          mkdir -p "$targetDir"
          pushd "$sourceDir" >/dev/null
          ./configure --prefix="$targetDir"
          make -j4 install
          popd >/dev/null
          echo "::endgroup::"

          echo "::group::packing nodejs build"
          tar cfz "$targetFile" -C "$targetDir" .
          echo "build=$targetFile" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.key_prefix }}-${{ steps.build-nodejs.outputs.version }}
          path: |
            ${{ steps.build-nodejs.outputs.source }}
            ${{ steps.build-nodejs.outputs.build }}

  test-nodejs:
    name: test nodejs
    runs-on: ubuntu-latest
    needs:
      - build-nodejs
    outputs:
      version: ${{ needs.build-nodejs.outputs.version }}
    steps:
      - name: setup ccache
        uses: Chocobo1/setup-ccache-action@v1
        with:
          override_cache_key: ${{ env.key_prefix }}
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.key_prefix }}-${{ needs.build-nodejs.outputs.version }}
      - name: test nodejs
        run: |
          set -e
          tar xf source.tgz
          ./configure
          make -j4 test-only

  test-npm:
    name: test npm
    runs-on: ubuntu-latest
    needs:
      - build-nodejs
    steps:
      - name: checkout npm/cli
        uses: actions/checkout@v3
        with:
          repository: npm/cli
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.key_prefix }}-${{ needs.build-nodejs.outputs.version }}
          path: ${{ runner.temp }}
      - name: install nodejs ${{ needs.build-nodejs.outputs.version }}
        id: install
        run: |
          set -e
          mkdir -p "${RUNNER_TEMP}/node"
          tar xf "${RUNNER_TEMP}/build.tgz" -C "${RUNNER_TEMP}/node"

          echo "${RUNNER_TEMP}/node/bin" >> $GITHUB_PATH
          echo "cache=$(npm config get cache)" >> $GITHUB_OUTPUT
      - name: setup npm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.install.outputs.cache }}
          key: npm-tests
      - run: node --version
      - run: npm --version
      - name: test npm
        run: |
          set -e
          node . run resetdeps
          node . link
          node . run test -ws -iwr --if-present --ignore-scripts

  build-matrix:
    name: build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: install dependencies
        run: |
          npm install --no-audit --no-fund citgm npm-package-arg
      - name: build matrix
        id: build-matrix
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process')
            const npa = require('npm-package-arg')

            const lookup = require('./node_modules/citgm/lib/lookup.json')

            const matchesKeyword = (value) => {
              const keywords = ['ubuntu', 'debian', 'linux', 'x86', '>=11', '>=12', '>=16', '>=17']
              if (value === true ||
                  (typeof value === 'string' && keywords.includes(value)) ||
                  (Array.isArray(value) && keywords.some((keyword) => value.includes(keyword) || value.includes(true)))) {
                return true
              }

              return false
            }

            // this is a manually updated list of packages that we know currently fail
            const knownFailures = [
              'body-parser', // json parsing error difference
              'clinic', // unknown, lots of failures
              'ember-cli', // timeout in nodejs ci, one failing test for us that timed out
              'express', // body-parser is what actually fails, it's used in a test
              'https-proxy-agent', // looks ssl related
              'node-gyp', // one test consistently times out
              'resolve', // compares results to require.resolve and fails, also missing inspector/promises
              'serialport', // esbuild barfs on node 20.0.0-pre
              'uuid', // tests that crypto.getRandomValues throws but it doesn't
            ]


            const matrix = []
            for (const package in lookup) {
              const meta = lookup[package]

              // we omit npm from the matrix because its tests are run as their own job
              if (matchesKeyword(meta.skip) || meta.yarn === true || package === 'npm') {
                continue
              }

              const install_flags = ['--no-audit', '--no-fund']
              if (meta.install) {
                install_flags.push(meta.install.slice(1))
              }
              const context = JSON.parse(execSync(`npm show ${package} --json`))
              const test = meta.scripts ? meta.scripts.map((script) => `npm run ${script}`) : ['npm test']

              const repo = npa(meta.repo || context.repository.url).hosted
              const details = {}
              if (meta.useGitClone) {
                details.repo = repo.https()
              } else {
                if (meta.ignoreGitHead) {
                  details.url = repo.tarball()
                } else {
                  details.url = repo.tarball({ committish: context.gitHead })
                }
              }

              const env = { 'npm_config_audit': 'false', 'npm_config_fund': 'false', ...meta.envVar }
              matrix.push({
                package,
                version: context.version,
                env,
                install_flags: install_flags.join(' '),
                commands: [...test],
                flaky: matchesKeyword(meta.flaky),
                knownFailure: knownFailures.includes(package),
                ...details,
              })
            }
            core.setOutput('matrix', matrix)

  citgm:
    name: citgm - ${{ matrix.package }}@${{ matrix.version }} ${{ matrix.flaky && '(flaky)' || '' }} ${{ matrix.knownFailure && '(known failure)' || '' }}
    runs-on: ubuntu-latest
    needs:
      - build-nodejs
      - build-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.key_prefix }}-${{ needs.build-nodejs.outputs.version }}
          path: ${{ runner.temp }}
      - name: install nodejs ${{ needs.build-nodejs.outputs.version }}
        id: install
        run: |
          set -e
          mkdir -p "${RUNNER_TEMP}/node" "${RUNNER_TEMP}/node-src"
          tar xf "${RUNNER_TEMP}/build.tgz" -C "${RUNNER_TEMP}/node"
          tar xf "${RUNNER_TEMP}/source.tgz" -C "${RUNNER_TEMP}/node-src"
          echo "source=${RUNNER_TEMP}/node-src" >> $GITHUB_OUTPUT

          echo "${RUNNER_TEMP}/node/bin" >> $GITHUB_PATH
          echo "cache=$(npm config get cache)" >> $GITHUB_OUTPUT
      - name: setup npm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.install.outputs.cache }}
          key: npm-${{ matrix.package }}
      - run: node --version
      - run: npm --version
      - name: download source
        id: download
        run: |
          set -eo pipefail
          TARGET_DIR="${RUNNER_TEMP}/${{ matrix.package }}"
          mkdir -p "$TARGET_DIR"
          echo "target=$TARGET_DIR" >> $GITHUB_OUTPUT

          if [[ -n "${{ matrix.repo }}" ]]; then
            export GIT_TERMINAL_PROMPT=0
            export GIT_SSH_COMMAND="ssh -oBatchMode=yes"
            git clone "${{ matrix.repo }}" "$TARGET_DIR"
          elif [[ -n "${{ matrix.url }}" ]]; then
            curl -sSL "${{ matrix.url }}" | tar xz -C "$TARGET_DIR" --strip=1
          fi
      - name: npm install ${{ matrix.install_flags }}
        working-directory: ${{ steps.download.outputs.target }}
        run: |
          npm install --nodedir="${{steps.install.outputs.source }}" ${{ matrix.install_flags }}
      - name: npm ls
        working-directory: ${{ steps.download.outputs.target }}
        run: |
          npm ls
      - name: ${{ join(matrix.commands, ' && ') }}
        env: ${{ matrix.env }}
        working-directory: ${{ steps.download.outputs.target }}
        run: |
          set +e
          FINALEXIT=0
          STEPEXIT=0

          for row in $(echo '${{ toJSON(matrix.commands) }}' | jq -r '.[] | @base64'); do
            COMMAND=$(echo "$row" | base64 --decode)
            echo "::group::$COMMAND"
            $COMMAND
            STEPEXIT=$?
            if [[ $STEPEXIT -ne 0 ]]; then
              if [[ "${{ matrix.flaky }}" == "true" ]]; then
                echo "::warning ::known flaky $COMMAND failed, exit: $STEPEXIT"
              elif [[ "${{ matrix.knownFailure }}" == "true" ]]; then
                echo "::warning ::known failing $COMMAND failed, exit: $STEPEXIT"
              else
                FINALEXIT=$STEPEXIT
                echo "::error ::$COMMAND failed, exit: $STEPEXIT"
              fi
            fi
            echo "::endgroup::"
          done
          exit $FINALEXIT
