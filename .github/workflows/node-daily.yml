name: nodejs nightly integration
on:
  workflow_dispatch:

jobs:
  build:
    name: Build nodejs nightly with updated npm
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Check out npm/cli
        uses: actions/checkout@v3
        with:
          repository: npm/cli
      - name: Build nodejs nightly
        id: build
        uses: actions/github-script@v6
        with:
          script: |
            // add ccache to the path
            core.addPath('/usr/local/opt/ccache/libexec')
            core.addPath('/usr/lib/ccache')

            // setup some common vars
            const tmpDir = process.env.RUNNER_TEMP
            const sourceDir = `${tmpDir}/src`
            const targetDir = `${tmpDir}/build`
            const sourceFile = `${tmpDir}/source.tgz`
            const targetFile = `${tmpDir}/build.tgz`

            // find the version of the latest nightly
            core.startGroup('finding version of latest nightly nodejs')
            await exec.exec('curl', ['-o', `${tmpDir}/nightlies.json`, 'https://nodejs.org/download/nightly/index.json'])
            const availableNightlies = require(`${tmpDir}/nightlies.json`)
            const { version } = availableNightlies[0]

            core.setOutput('version', version)
            core.endGroup()

            // download the source tarball
            core.startGroup(`retrieving nodejs nightly ${version}`)
            await exec.exec('curl', ['-o', `${tmpDir}/node-${version}.tar.xz`, `https://nodejs.org/download/nightly/${version}/node-${version}.tar.xz`])

            // extract the source
            await io.mkdirP(sourceDir)
            await exec.exec('tar', ['xf', `${tmpDir}/node-${version}.tar.xz`, '--strip=1', '-C', sourceDir])
            core.endGroup()

            // update the bundled npm
            core.startGroup('updating bundled npm')
            await exec.exec('node', ['.', 'run', 'resetdeps'])

            let npmTarball = ''
            await exec.exec('node', ['.', 'pack', '--loglevel=silent'], {
              listeners: {
                stdout: (data) => {
                  npmTarball += data
                },
              },
            })
            npmTarball = npmTarball
              .trim()
              .split(/\n/g)
              .find((item) => {
                return item.startsWith('npm-') && item.endsWith('.tgz')
              })

            await io.rmRF(`${sourceDir}/deps/npm`)
            await io.mkdirP(`${sourceDir}/deps/npm`)

            await exec.exec('tar', ['xf', npmTarball, '-C', `${sourceDir}/deps/npm/`, '--strip=1'])
            core.endGroup()

            // configure the source directory
            core.startGroup('configuring nodejs build')
            await io.mkdirP(targetDir)
            await exec.exec('./configure', ['--prefix', targetDir], { cwd: sourceDir })
            core.endGroup()

            // compile
            core.startGroup('compiling')
            await exec.exec('make', ['-j4', 'install'], { cwd: sourceDir })
            core.endGroup()

            // pack the artifacts
            core.startGroup('building artifacts')
            await exec.exec('tar', ['cfz', targetFile, '.'], { cwd: targetDir })
            core.setOutput('build', targetFile)

            await exec.exec('tar', ['cfz', sourceFile, '.'], { cwd: sourceDir })
            core.setOutput('source', sourceFile)
            core.endGroup()
      - name: Upload nodejs artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nodejs-nightly-${{ steps.build.outputs.version }}
          path: |
            ${{ steps.build.outputs.source }}
            ${{ steps.build.outputs.build }}
  test:
    name: Run nodejs tests
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      version: ${{ needs.build.outputs.version }}
    steps:
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2
      - name: Fetch nightly nodejs source artifact
        uses: actions/download-artifact@v3
        with:
          name: nodejs-nightly-${{ needs.build.outputs.version }}-source.tgz
      - name: Test nodejs nightly
        uses: actions/github-script@v6
        id: test
        with:
          script: |
            // add ccache to the path
            core.addPath('/usr/local/opt/ccache/libexec')
            core.addPath('/usr/lib/ccache')

            await exec.exec('tar', ['xf', 'source.tgz'])
            await exec.exec('make', ['test-only'])
  fetch-lookup:
    name: Retrieve package set for citgm
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.fetch-lookup.outputs.packages }}
    steps:
      - name: Fetch lookup table
        id: fetch-lookup
        uses: actions/github-script@v6
        with:
          script: |
            await exec.exec('npm', ['install', 'citgm'])

            let lookup = ''
            await exec.exec('cat', ['node_modules/citgm/lib/lookup.json'], {
              listeners: {
                stdout: (data) => {
                  lookup += data
                },
              },
            })
            lookup = JSON.parse(lookup)

            const packages = Object.keys(lookup).filter((name) => {
              const item = lookup[name]
              if (item.skip === true) {
                return false
              }
              // TODO expand this to skip more things

              return true
            })
            core.setOutput('packages', packages)
  citgm:
    name: Run citgm
    runs-on: ubuntu-latest
    needs:
      - build
      - fetch-lookup
    strategy:
      matrix:
        package: ${{ fromJson(needs.fetch-lookup.outputs.packages) }}
    steps:
      - name: Fetch nightly nodejs build artifact
        uses: actions/download-artifact@v3
        with:
          name: nodejs-nightly-${{ needs.build-nightly.outputs.version }}.tgz
      - name: Install nightly nodejs build ${{ needs.build.outputs.version }}
        uses: actions/github-script@v6
        id: install
        with:
          script: |
            core.startGroup('extracting artifact')
            await io.mkdirP(`${process.cwd()}/node`)
            await exec.exec('tar', ['xf', 'nodejs-nightly-${{ needs.build.outputs.version }}.tgz', '-C', './node'])
            core.endGroup()

            core.addPath(`${process.cwd()}/node/bin`)

            let cachePath = ''
            await exec.exec('npm', ['config', 'get', 'cache'], {
              listeners: {
                stdout: (data) => {
                  cachePath += data
                },
              },
            })
            cachePath = cachePath.trim()
            core.setOutput('cache', cachePath)
      - name: Setup npm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.install.outputs.cache }}
          key: npm-${{ matrix.package }}
      - run: node --version
      - run: npm --version
      - name: Run citgm
        run: |
          echo "require('child_process').execSync('npm ls')" > "${RUNNER_TEMP}/citgm-test.js"
          npx -y citgm --customTest="${RUNNER_TEMP}/citgm-test.js" --markdown ${{ matrix.package }}
