name: Update a thing

on:
  pull_request:

permissions:
  contents: write
  checks: write

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.status.outputs.has-changes }}
      commit-ref: ${{ steps.commit.outputs.commit-ref }}
      check-id: ${{ steps.create-run.outputs.check-id }}
    steps:
      - uses: actions/checkout@v3
      - name: Maybe make some changes
        run: |
          if [[ $((RANDOM%2)) -eq 1 ]]; then
            echo "t.pass('ran again')" >> test/index.js
          fi
      - name: Check for changes
        id: status
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "::set-output name=has-changes::true"
          fi
      - name: Commit and push changes
        id: commit
        if: steps.status.outputs.has-changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr checkout ${{ github.event.pull_request.number }}
          git add test/index.js
          git config --local user.email "ops+npm-cli@npmjs.com"
          git config --local user.name "npm cli ops bot"
          git commit -m 'chore: add a test'
          git push
          echo "::set-output name=commit-ref::$(git rev-parse HEAD)"
      - name: Create check run for future commit
        id: create-run
        if: steps.status.outputs.has-changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHECK_ID=$(gh api /repos/{owner}/{repo}/check-runs \
            -f external_id=post_mod_actions \
            -f name="Running post-modification actions..." \
            -f head_sha=${{ steps.commit.outputs.commit-ref }} \
            -f status=in_progress \
            --jq .id)
          echo "::set-output name=check-id::$CHECK_ID"

  lint:
    needs: update
    if: needs.update.outputs.has-changes == 'true'
    uses: ./.github/workflows/lint.yml
    with:
      ref: ${{ needs.update.outputs.commit-ref }}

  test:
    needs: update
    if: needs.update.outputs.has-changes == 'true'
    uses: ./.github/workflows/test.yml
    with:
      ref: ${{ needs.update.outputs.commit-ref }}

  create-run:
    if: ${{ needs.update.outputs.has-changes == 'true' }}
    needs:
      - update
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create check run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FINAL_CONCLUSION=success
          CHECKSUITE_ID=$(gh api /repos/{owner}/{repo}/actions/runs/${{ github.run_id }} --jq .check_suite_id)
          echo "Getting check runs for suite $CHECKSUITE_ID..."

          gh api /repos/{owner}/{repo}/check-suites/$CHECKSUITE_ID/check-runs \
            --jq '.check_runs.[] | [.name, .status, .conclusion, .details_url, .started_at, .completed_at] | join("|")' \
            | while read CHECK
          do
            NAME=${CHECK%%|*}
            CHECK=${CHECK:${#NAME}+1}
            STATUS=${CHECK%%|*}
            CHECK=${CHECK:${#STATUS}+1}
            CONCLUSION=${CHECK%%|*}
            CHECK=${CHECK:${#CONCLUSION}+1}
            DETAILS_URL=${CHECK%%|*}
            CHECK=${CHECK:${#DETAILS_URL}+1}
            STARTED_AT=${CHECK%%|*}
            CHECK=${CHECK:${#STARTED_AT}+1}
            COMPLETED_AT=$CHECK
            if [[ "$STATUS" == "completed" ]]; then
              [[ "$CONCLUSION" != "success" ]] && FINAL_CONCLUSION=failure
              echo "Creating check run: $NAME..."
              gh api /repos/{owner}/{repo}/check-runs \
                -f name="$NAME" \
                -f head_sha=${{ needs.update.outputs.commit-ref }} \
                -f status=$STATUS \
                -f conclusion=$CONCLUSION \
                -f started_at=$STARTED_AT \
                -f completed_at=$COMPLETED_AT \
                -F output='{"title": "'"$NAME"'", "summary": "'"$DETAILS_URL"'"}' \
                --jq '{ id, name, status, conclusion, output }'
            fi
          done
          echo "Updating overall check run..."
          gh api -X PATCH /repos/{owner}/{repo}/check-runs/${{ needs.update.outputs.check-id }} \
            -f status=completed \
            -f conclusion=$FINAL_CONCLUSION \
            --jq '{ id, name, status, conclusion }'
